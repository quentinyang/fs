#!/usr/bin/env node
var Promise = require('bluebird');

const exec = require('child_process').exec;
const shellCreateRepository = './shell/create_repository.sh';
const shellUpdateRepository = './shell/update_repository.sh';
const shellRebuildRepository = './shell/rebuild_repository.sh';

// 指定仓库、分支和部署环境，完成部署
var repository = '';
var branch = 'master';
var deployment = 'alpha';
var destDir = '../deployments/';

var versionModel = require('../models/version');

// -- Coding Start@2016-08-03
/**
 * Create deploy log into database.
 * @return Promise
 *  var a = createDeployLog({}).then((deployId)=>{console.log(deployId)})
 */
function createDeployLog(params) {
    return versionModel.create({
                repository: params.repository,
                branch: params.branch,
                deployment: params.deployment,
                platform: params.platform
            }).then((id) => {
                params.id = id;
                return Promise.resolve(params);
            });
}

// -- Coding End@2016-08-03

/**
 * @param object params
 * properties:
 *  - id required deploy id
 *  - repository required
 *  - branch required
 *  - deployment required
 *  - destDir required
 *  - platform optional
 *  - success optional
 *  - error optional
 */
function createRepository(params) {

    return new Promise((resolve, reject) => {

        var deployId = params.id;
        var repository = params.repository;
        var branch = params.branch;
        var deployment= params.deployment;
        var destDir = params.destDir;
        var platform = params.platform;

        var command = [shellCreateRepository, repository, branch, deployment, destDir].join(' ');
        console.log('Execute: ', command);
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.log(`${error} stderr: ${stderr}`);
                reject({params: params})
                return;
            }

            console.log(`STDOUT@createRepository: ${stdout}`);
            versionModel.updateStatusById({
                    id: deployId,
                    status: 1
            }).then(() => {
                resolve(params);
            });

        });

    })


}

// TODO::update
function updateRepository(repository, branch, deployment, destDir) {
    var command = [shellUpdateRepository, repository, branch, deployment, destDir].join(' ');
    console.log('Execute: ', command);
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.log(`${error} stderr: ${stderr}`);
            return;
        }
        console.log(`stdout: ${stdout}`);
    });
}

/**
 * Rebuild repository
 * @param object params
 *      properties:
 *      - id required
 *      - repository required
 *      - branch required
 *      - deployment required
 *      - destDir required
 *      - platform required
 *      - ufaConfig object required
 *          - debug boolean required
 *          - origin string required
 *          - dest string required
 *          - rule string required
 *          - middlePath string optional
 */
function rebuidRepository(params) {
    var deployId = params.id;
    var repository = params.repository;
    var branch = params.branch;
    var deployment= params.deployment;
    var destDir = params.destDir;
    var platform = params.platform;
    var ufaConfig = params.ufaConfig;
    var success = params.success;
    var error = params.error;
    
    return new Promise((resolve, reject) => {

        var command = [shellRebuildRepository, repository, branch, deployment, destDir, 
                                    ufaConfig.debug, ufaConfig.origin, ufaConfig.dest, ufaConfig.rule].join(' ');
        console.log('Execute: ', command);
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.log(`${error} stderr: ${stderr}`);
                reject(params);
                return;
            }
            console.log(`STDOUT: ${stdout}`);

            versionModel.updateStatusById({
                id: deployId,
                status: 2
            }).then(() => {
                resolve(params);    
            });
            
        });

    });


}

function store(params) {
    // TODO::Remove Store database.
    console.log('# Store', params)
}

module.exports = {
    createDeployLog: createDeployLog,// created at 2016-08-03
    create: createRepository,
    update: updateRepository,
    rebuild: rebuidRepository,
    store: store,
}

if (process.argv.length > 2) {
    // run command
    store({
        platform: process.argv[2],
        deployment: process.argv[3],
        author: ''
    });
}
