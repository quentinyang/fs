#!/usr/bin/env node

const exec = require('child_process').exec;
const shellCreateRepository = './shell/create_repository.sh';
const shellUpdateRepository = './shell/update_repository.sh';
const shellRebuildRepository = './shell/rebuild_repository.sh';

// 指定仓库、分支和部署环境，完成部署
var repository = '';
var branch = 'master';
var deployment = 'alpha';
var destDir = '../deployments/';

var versionModel = require('../models/version');

function createRepository(repository, branch, deployment, platform, destDir, callback) {
    var command = [shellCreateRepository, repository, branch, deployment, destDir].join(' ');
    console.log('Execute: ', command);
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.log(`${error} stderr: ${stderr}`);
            return;
        }
        console.log(`stdout: ${stdout}`);

        callback && callback(repository, branch, deployment, platform, destDir);
        versionModel.create({
            repository: repository,
            branch: branch,
            deployment: deployment,
            platform, platform
        });

    });
}

function updateRepository(repository, branch, deployment, destDir) {
    var command = [shellUpdateRepository, repository, branch, deployment, destDir].join(' ');
    console.log('Execute: ', command);
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.log(`${error} stderr: ${stderr}`);
            return;
        }
        console.log(`stdout: ${stdout}`);
    });
}

/**
 * 
 */
function rebuidRepository(repository, branch, deployment, platform, destDir, ufaConfig) {
    var command = [shellRebuildRepository, repository, branch, deployment, destDir, 
                                ufaConfig.debug, ufaConfig.origin, ufaConfig.dest, ufaConfig.rule].join(' ');
    console.log('Execute: ', command);
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.log(`${error} stderr: ${stderr}`);
            return;
        }
        console.log(`stdout: ${stdout}`);

        versionModel.update({
            repository: repository,
            branch: branch, 
            platform: platform,
            deployment: deployment,
            status: 1
        });
        
    });

}

function store(params) {
    // TODO::Store database.
    console.log('# Store', params)
}

module.exports = {
    create: createRepository,
    update: updateRepository,
    rebuild: rebuidRepository,
    store: store,
}

if (process.argv.length > 2) {
    // run command
    store({
        patform: process.argv[2],
        deployment: process.argv[3],
        platform: process.argv[4],
        author: ''
    });
}
