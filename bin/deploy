#!/usr/bin/env node

const exec = require('child_process').exec;
const shellCreateRepository = './shell/create_repository.sh';
const shellUpdateRepository = './shell/update_repository.sh';
const shellRebuildRepository = './shell/rebuild_repository.sh';

// 指定仓库、分支和部署环境，完成部署
var repository = '';
var branch = 'master';
var deployment = 'alpha';
var destDir = '../deployments/';

var versionModel = require('../models/version');

/**
 * @param object params
 * properties:
 *  - repository required
 *  - branch required
 *  - deployment required
 *  - destDir required
 *  - platform optional
 *  - success optional
 *  - error optional
 */
function createRepository(params) {
    var repository = params.repository;
    var branch = params.branch;
    var deployment= params.deployment;
    var destDir = params.destDir;
    var platform = params.platform;
    var success = params.success;
    var error = params.error;

    var command = [shellCreateRepository, repository, branch, deployment, destDir].join(' ');
    console.log('Execute: ', command);
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.log(`${error} stderr: ${stderr}`);

            versionModel.update({
                status: 0,
                branch: branch,
                deployment: deployment,
                platform, platform
            });

            error && error(params)

            return;
        }
        console.log(`STDOUT: ${stdout}`);

        versionModel.create({
            repository: repository,
            branch: branch,
            deployment: deployment,
            platform, platform
        });

        success && success(params);

    });
}

// TODO::update
function updateRepository(repository, branch, deployment, destDir) {
    var command = [shellUpdateRepository, repository, branch, deployment, destDir].join(' ');
    console.log('Execute: ', command);
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.log(`${error} stderr: ${stderr}`);
            return;
        }
        console.log(`stdout: ${stdout}`);
    });
}

/**
 * Rebuild repository
 * @param object params
 *      properties:
 *      - repository required
 *      - branch required
 *      - deployment required
 *      - destDir required
 *      - platform required
 *      - ufaConfig object required
 *          - debug boolean required
 *          - origin string required
 *          - dest string required
 *          - rule string required
 *          - middlePath string optional
 *      - success optional
 *      - error optional
 */
function rebuidRepository(params) {
    var repository = params.repository;
    var branch = params.branch;
    var deployment= params.deployment;
    var destDir = params.destDir;
    var platform = params.platform;
    var ufaConfig = params.ufaConfig;
    var success = params.success;
    var error = params.error;

    var command = [shellRebuildRepository, repository, branch, deployment, destDir, 
                                ufaConfig.debug, ufaConfig.origin, ufaConfig.dest, ufaConfig.rule].join(' ');
    console.log('Execute: ', command);
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.log(`${error} stderr: ${stderr}`);
            versionModel.update({
                repository: repository,
                branch: branch,
                deployment: deployment,
                platform, platform,
                status: 0
            });
            error && error(params)
            return;
        }
        console.log(`STDOUT: ${stdout}`);

        success && success(params);

        versionModel.update({
            repository: repository,
            branch: branch, 
            platform: platform,
            deployment: deployment,
            status: 1
        });
        
    });

}

function store(params) {
    // TODO::Remove Store database.
    console.log('# Store', params)
}

module.exports = {
    create: createRepository,
    update: updateRepository,
    rebuild: rebuidRepository,
    store: store,
}

if (process.argv.length > 2) {
    // run command
    store({
        patform: process.argv[2],
        deployment: process.argv[3],
        platform: process.argv[4],
        author: ''
    });
}
